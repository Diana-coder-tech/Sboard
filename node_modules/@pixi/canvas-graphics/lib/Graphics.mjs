import { CanvasRenderer } from "@pixi/canvas-renderer";
import { Matrix, Rectangle, RenderTexture, Texture } from "@pixi/core";
import { Graphics } from "@pixi/graphics";
let canvasRenderer;
const tempMatrix = new Matrix();
Graphics.prototype.generateCanvasTexture = function(scaleMode, resolution = 1) {
  const bounds = this.getLocalBounds(new Rectangle());
  bounds.width = Math.max(bounds.width, 1 / resolution), bounds.height = Math.max(bounds.height, 1 / resolution);
  const canvasBuffer = RenderTexture.create({
    width: bounds.width,
    height: bounds.height,
    scaleMode,
    resolution
  });
  canvasRenderer || (canvasRenderer = new CanvasRenderer()), this.transform.updateLocalTransform(), this.transform.localTransform.copyTo(tempMatrix), tempMatrix.invert(), tempMatrix.tx -= bounds.x, tempMatrix.ty -= bounds.y, canvasRenderer.render(this, { renderTexture: canvasBuffer, clear: !0, transform: tempMatrix });
  const texture = Texture.from(
    canvasBuffer.baseTexture._canvasRenderTarget.canvas,
    { scaleMode }
  );
  return texture.baseTexture.setResolution(resolution), texture;
};
Graphics.prototype.cachedGraphicsData = [];
Graphics.prototype._renderCanvas = function(renderer) {
  this.isMask !== !0 && (this.finishPoly(), renderer.plugins.graphics.render(this));
};
//# sourceMappingURL=Graphics.mjs.map
