"use strict";
var canvasRenderer$1 = require("@pixi/canvas-renderer"), core = require("@pixi/core"), graphics = require("@pixi/graphics");
let canvasRenderer;
const tempMatrix = new core.Matrix();
graphics.Graphics.prototype.generateCanvasTexture = function(scaleMode, resolution = 1) {
  const bounds = this.getLocalBounds(new core.Rectangle());
  bounds.width = Math.max(bounds.width, 1 / resolution), bounds.height = Math.max(bounds.height, 1 / resolution);
  const canvasBuffer = core.RenderTexture.create({
    width: bounds.width,
    height: bounds.height,
    scaleMode,
    resolution
  });
  canvasRenderer || (canvasRenderer = new canvasRenderer$1.CanvasRenderer()), this.transform.updateLocalTransform(), this.transform.localTransform.copyTo(tempMatrix), tempMatrix.invert(), tempMatrix.tx -= bounds.x, tempMatrix.ty -= bounds.y, canvasRenderer.render(this, { renderTexture: canvasBuffer, clear: !0, transform: tempMatrix });
  const texture = core.Texture.from(
    canvasBuffer.baseTexture._canvasRenderTarget.canvas,
    { scaleMode }
  );
  return texture.baseTexture.setResolution(resolution), texture;
};
graphics.Graphics.prototype.cachedGraphicsData = [];
graphics.Graphics.prototype._renderCanvas = function(renderer) {
  this.isMask !== !0 && (this.finishPoly(), renderer.plugins.graphics.render(this));
};
//# sourceMappingURL=Graphics.js.map
