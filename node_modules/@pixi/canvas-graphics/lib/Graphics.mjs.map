{"version":3,"file":"Graphics.mjs","sources":["../src/Graphics.ts"],"sourcesContent":["import { CanvasRenderer } from '@pixi/canvas-renderer';\nimport { Matrix, Rectangle, RenderTexture, Texture } from '@pixi/core';\nimport { Graphics } from '@pixi/graphics';\n\nimport type { BaseRenderTexture, SCALE_MODES } from '@pixi/core';\n\nlet canvasRenderer: CanvasRenderer;\nconst tempMatrix = new Matrix();\n\n/**\n * Generates a canvas texture. Only available with **pixi.js-legacy** bundle\n * or the **@pixi/canvas-graphics** package.\n * @method generateCanvasTexture\n * @memberof PIXI.Graphics#\n * @param {PIXI.SCALE_MODES} [scaleMode] - The scale mode of the texture.\n * @param {number} resolution - The resolution of the texture.\n * @returns {PIXI.Texture} The new texture.\n */\nGraphics.prototype.generateCanvasTexture = function generateCanvasTexture(scaleMode?: SCALE_MODES, resolution = 1): Texture\n{\n    const bounds = this.getLocalBounds(new Rectangle());\n\n    bounds.width = Math.max(bounds.width, 1 / resolution);\n    bounds.height = Math.max(bounds.height, 1 / resolution);\n\n    const canvasBuffer = RenderTexture.create({\n        width: bounds.width,\n        height: bounds.height,\n        scaleMode,\n        resolution,\n    });\n\n    if (!canvasRenderer)\n    {\n        canvasRenderer = new CanvasRenderer();\n    }\n\n    this.transform.updateLocalTransform();\n    this.transform.localTransform.copyTo(tempMatrix);\n\n    tempMatrix.invert();\n\n    tempMatrix.tx -= bounds.x;\n    tempMatrix.ty -= bounds.y;\n\n    canvasRenderer.render(this, { renderTexture: canvasBuffer, clear: true, transform: tempMatrix });\n\n    const texture = Texture.from(\n        (canvasBuffer.baseTexture as BaseRenderTexture)._canvasRenderTarget.canvas,\n        { scaleMode });\n\n    texture.baseTexture.setResolution(resolution);\n\n    return texture;\n};\n\nGraphics.prototype.cachedGraphicsData = [];\n\n/**\n * Renders the object using the Canvas renderer\n * @method _renderCanvas\n * @memberof PIXI.Graphics#\n * @private\n * @param {PIXI.CanvasRenderer} renderer - The renderer\n */\nGraphics.prototype._renderCanvas = function _renderCanvas(renderer: CanvasRenderer): void\n{\n    if (this.isMask === true)\n    {\n        return;\n    }\n\n    this.finishPoly();\n    renderer.plugins.graphics.render(this);\n};\n"],"names":[],"mappings":";;;AAMA,IAAI;AACJ,MAAM,aAAa,IAAI;AAWvB,SAAS,UAAU,wBAAwB,SAA+B,WAAyB,aAAa,GAChH;AACI,QAAM,SAAS,KAAK,eAAe,IAAI,UAAW,CAAA;AAElD,SAAO,QAAQ,KAAK,IAAI,OAAO,OAAO,IAAI,UAAU,GACpD,OAAO,SAAS,KAAK,IAAI,OAAO,QAAQ,IAAI,UAAU;AAEhD,QAAA,eAAe,cAAc,OAAO;AAAA,IACtC,OAAO,OAAO;AAAA,IACd,QAAQ,OAAO;AAAA,IACf;AAAA,IACA;AAAA,EAAA,CACH;AAEI,qBAED,iBAAiB,IAAI,eAAe,IAGxC,KAAK,UAAU,qBACf,GAAA,KAAK,UAAU,eAAe,OAAO,UAAU,GAE/C,WAAW,OAAO,GAElB,WAAW,MAAM,OAAO,GACxB,WAAW,MAAM,OAAO,GAExB,eAAe,OAAO,MAAM,EAAE,eAAe,cAAc,OAAO,IAAM,WAAW,YAAY;AAE/F,QAAM,UAAU,QAAQ;AAAA,IACnB,aAAa,YAAkC,oBAAoB;AAAA,IACpE,EAAE,UAAU;AAAA,EAAA;AAER,SAAA,QAAA,YAAY,cAAc,UAAU,GAErC;AACX;AAEA,SAAS,UAAU,qBAAqB;AASxC,SAAS,UAAU,gBAAgB,SAAuB,UAC1D;AACQ,OAAK,WAAW,OAKpB,KAAK,WAAA,GACL,SAAS,QAAQ,SAAS,OAAO,IAAI;AACzC;"}