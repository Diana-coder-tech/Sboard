{"version":3,"file":"CanvasExtract.js","sources":["../src/CanvasExtract.ts"],"sourcesContent":["import { extensions, ExtensionType, Rectangle, RenderTexture, utils } from '@pixi/core';\n\nimport type { CanvasRenderer } from '@pixi/canvas-renderer';\nimport type { BaseRenderTexture, ExtensionMetadata, ICanvas, ISystem } from '@pixi/core';\nimport type { DisplayObject } from '@pixi/display';\nimport type { IExtract } from '@pixi/extract';\n\nconst TEMP_RECT = new Rectangle();\n\n/**\n * The extract manager provides functionality to export content from the renderers.\n *\n * An instance of this class is automatically created by default, and can be found at `renderer.extract`\n * @class\n * @memberof PIXI\n */\nexport class CanvasExtract implements ISystem, IExtract\n{\n    /** @ignore */\n    static extension: ExtensionMetadata = {\n        name: 'extract',\n        type: ExtensionType.CanvasRendererSystem,\n    };\n\n    /** A reference to the current renderer */\n    public renderer: CanvasRenderer | null;\n\n    /**\n     * @param renderer - A reference to the current renderer\n     */\n    constructor(renderer: CanvasRenderer)\n    {\n        this.renderer = renderer;\n    }\n\n    /**\n     * Will return a HTML Image of the target\n     * @param target - A displayObject or renderTexture\n     *  to convert. If left empty will use the main renderer\n     * @param format - Image format, e.g. \"image/jpeg\" or \"image/webp\".\n     * @param quality - JPEG or Webp compression from 0 to 1. Default is 0.92.\n     * @param frame - The frame the extraction is restricted to.\n     * @returns HTML Image of the target\n     */\n    public async image(target?: DisplayObject | RenderTexture, format?: string, quality?: number,\n        frame?: Rectangle): Promise<HTMLImageElement>\n    {\n        const image = new Image();\n\n        image.src = await this.base64(target, format, quality, frame);\n\n        return image;\n    }\n\n    /**\n     * Will return a base64 encoded string of this target. It works by calling\n     *  `CanvasExtract.getCanvas` and then running toDataURL on that.\n     * @param target - A displayObject or renderTexture\n     *  to convert. If left empty will use the main renderer\n     * @param format - Image format, e.g. \"image/jpeg\" or \"image/webp\".\n     * @param quality - JPEG or Webp compression from 0 to 1. Default is 0.92.\n     * @param frame - The frame the extraction is restricted to.\n     * @returns A base64 encoded string of the texture.\n     */\n    public async base64(target?: DisplayObject | RenderTexture, format?: string, quality?: number,\n        frame?: Rectangle): Promise<string>\n    {\n        const canvas = this.canvas(target, frame);\n\n        if (canvas.toBlob !== undefined)\n        {\n            return new Promise<string>((resolve, reject) =>\n            {\n                // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n                canvas.toBlob!((blob) =>\n                {\n                    if (!blob)\n                    {\n                        reject(new Error('ICanvas.toBlob failed!'));\n\n                        return;\n                    }\n\n                    const reader = new FileReader();\n\n                    reader.onload = () => resolve(reader.result as string);\n                    reader.onerror = reject;\n                    reader.readAsDataURL(blob);\n                }, format, quality);\n            });\n        }\n        if (canvas.toDataURL !== undefined)\n        {\n            return canvas.toDataURL(format, quality);\n        }\n        if (canvas.convertToBlob !== undefined)\n        {\n            const blob = await canvas.convertToBlob({ type: format, quality });\n\n            return new Promise<string>((resolve, reject) =>\n            {\n                const reader = new FileReader();\n\n                reader.onload = () => resolve(reader.result as string);\n                reader.onerror = reject;\n                reader.readAsDataURL(blob);\n            });\n        }\n\n        throw new Error('CanvasExtract.base64() requires ICanvas.toDataURL, ICanvas.toBlob, '\n            + 'or ICanvas.convertToBlob to be implemented');\n    }\n\n    /**\n     * Creates a Canvas element, renders this target to it and then returns it.\n     * @param target - A displayObject or renderTexture\n     *  to convert. If left empty will use the main renderer\n     * @param frame - The frame the extraction is restricted to.\n     * @returns A Canvas element with the texture rendered on.\n     */\n    public canvas(target?: DisplayObject | RenderTexture, frame?: Rectangle): ICanvas\n    {\n        const renderer = this.renderer;\n\n        if (!renderer)\n        {\n            throw new Error('The CanvasExtract has already been destroyed');\n        }\n\n        let context;\n        let resolution;\n        let renderTexture;\n\n        if (target)\n        {\n            if (target instanceof RenderTexture)\n            {\n                renderTexture = target;\n            }\n            else\n            {\n                renderTexture = renderer.generateTexture(target, {\n                    region: frame,\n                    resolution: renderer.resolution\n                });\n\n                if (frame)\n                {\n                    TEMP_RECT.width = frame.width;\n                    TEMP_RECT.height = frame.height;\n                    frame = TEMP_RECT;\n                }\n            }\n        }\n\n        if (renderTexture)\n        {\n            context = (renderTexture.baseTexture as BaseRenderTexture)._canvasRenderTarget.context;\n            resolution = (renderTexture.baseTexture as BaseRenderTexture)._canvasRenderTarget.resolution;\n            frame = frame ?? renderTexture.frame;\n        }\n        else\n        {\n            context = renderer.canvasContext.rootContext;\n            resolution = renderer._view.resolution;\n\n            if (!frame)\n            {\n                frame = TEMP_RECT;\n                frame.width = renderer.width / resolution;\n                frame.height = renderer.height / resolution;\n            }\n        }\n\n        const x = Math.round(frame.x * resolution);\n        const y = Math.round(frame.y * resolution);\n        const width = Math.max(Math.round(frame.width * resolution), 1);\n        const height = Math.max(Math.round(frame.height * resolution), 1);\n\n        const canvasBuffer = new utils.CanvasRenderTarget(width, height, 1);\n        const canvasData = context.getImageData(x, y, width, height);\n\n        canvasBuffer.context.putImageData(canvasData, 0, 0);\n\n        // send the canvas back..\n        return canvasBuffer.canvas;\n    }\n\n    /**\n     * Will return a one-dimensional array containing the pixel data of the entire texture in RGBA\n     * order, with integer values between 0 and 255 (included).\n     * @param target - A displayObject or renderTexture\n     *  to convert. If left empty will use the main renderer\n     * @param frame - The frame the extraction is restricted to.\n     * @returns One-dimensional array containing the pixel data of the entire texture\n     */\n    public pixels(target?: DisplayObject | RenderTexture, frame?: Rectangle): Uint8ClampedArray\n    {\n        const renderer = this.renderer;\n\n        if (!renderer)\n        {\n            throw new Error('The CanvasExtract has already been destroyed');\n        }\n\n        let context;\n        let resolution;\n        let renderTexture;\n\n        if (target)\n        {\n            if (target instanceof RenderTexture)\n            {\n                renderTexture = target;\n            }\n            else\n            {\n                renderTexture = renderer.generateTexture(target, {\n                    region: frame,\n                    resolution: renderer.resolution\n                });\n\n                if (frame)\n                {\n                    TEMP_RECT.width = frame.width;\n                    TEMP_RECT.height = frame.height;\n                    frame = TEMP_RECT;\n                }\n            }\n        }\n\n        if (renderTexture)\n        {\n            context = (renderTexture.baseTexture as BaseRenderTexture)._canvasRenderTarget.context;\n            resolution = (renderTexture.baseTexture as BaseRenderTexture)._canvasRenderTarget.resolution;\n            frame = frame ?? renderTexture.frame;\n        }\n        else\n        {\n            context = renderer.canvasContext.rootContext;\n            resolution = renderer.resolution;\n\n            if (!frame)\n            {\n                frame = TEMP_RECT;\n                frame.width = renderer.width / resolution;\n                frame.height = renderer.height / resolution;\n            }\n        }\n\n        const x = Math.round(frame.x * resolution);\n        const y = Math.round(frame.y * resolution);\n        const width = Math.max(Math.round(frame.width * resolution), 1);\n        const height = Math.max(Math.round(frame.height * resolution), 1);\n\n        return context.getImageData(x, y, width, height).data;\n    }\n\n    /** Destroys the extract */\n    public destroy(): void\n    {\n        this.renderer = null;\n    }\n}\n\nextensions.add(CanvasExtract);\n"],"names":["Rectangle","RenderTexture","utils","ExtensionType","extensions"],"mappings":";;AAOA,MAAM,YAAY,IAAIA,KAAAA;AASf,MAAM,cACb;AAAA;AAAA;AAAA;AAAA,EAaI,YAAY,UACZ;AACI,SAAK,WAAW;AAAA,EACpB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAWA,MAAa,MAAM,QAAwC,QAAiB,SACxE,OACJ;AACU,UAAA,QAAQ,IAAI;AAEZ,WAAA,MAAA,MAAM,MAAM,KAAK,OAAO,QAAQ,QAAQ,SAAS,KAAK,GAErD;AAAA,EACX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAYA,MAAa,OAAO,QAAwC,QAAiB,SACzE,OACJ;AACI,UAAM,SAAS,KAAK,OAAO,QAAQ,KAAK;AAExC,QAAI,OAAO,WAAW;AAElB,aAAO,IAAI,QAAgB,CAAC,SAAS,WACrC;AAEW,eAAA,OAAQ,CAAC,SAChB;AACI,cAAI,CAAC,MACL;AACW,mBAAA,IAAI,MAAM,wBAAwB,CAAC;AAE1C;AAAA,UACJ;AAEM,gBAAA,SAAS,IAAI;AAEZ,iBAAA,SAAS,MAAM,QAAQ,OAAO,MAAgB,GACrD,OAAO,UAAU,QACjB,OAAO,cAAc,IAAI;AAAA,QAAA,GAC1B,QAAQ,OAAO;AAAA,MAAA,CACrB;AAEL,QAAI,OAAO,cAAc;AAEd,aAAA,OAAO,UAAU,QAAQ,OAAO;AAEvC,QAAA,OAAO,kBAAkB,QAC7B;AACU,YAAA,OAAO,MAAM,OAAO,cAAc,EAAE,MAAM,QAAQ,SAAS;AAEjE,aAAO,IAAI,QAAgB,CAAC,SAAS,WACrC;AACU,cAAA,SAAS,IAAI;AAEZ,eAAA,SAAS,MAAM,QAAQ,OAAO,MAAgB,GACrD,OAAO,UAAU,QACjB,OAAO,cAAc,IAAI;AAAA,MAAA,CAC5B;AAAA,IACL;AAEM,UAAA,IAAI,MAAM,+GACkC;AAAA,EACtD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASO,OAAO,QAAwC,OACtD;AACI,UAAM,WAAW,KAAK;AAEtB,QAAI,CAAC;AAEK,YAAA,IAAI,MAAM,8CAA8C;AAGlE,QAAI,SACA,YACA;AAEA,eAEI,kBAAkBC,KAAAA,gBAElB,gBAAgB,UAIhB,gBAAgB,SAAS,gBAAgB,QAAQ;AAAA,MAC7C,QAAQ;AAAA,MACR,YAAY,SAAS;AAAA,IACxB,CAAA,GAEG,UAEA,UAAU,QAAQ,MAAM,OACxB,UAAU,SAAS,MAAM,QACzB,QAAQ,cAKhB,iBAEA,UAAW,cAAc,YAAkC,oBAAoB,SAC/E,aAAc,cAAc,YAAkC,oBAAoB,YAClF,QAAQ,SAAS,cAAc,UAI/B,UAAU,SAAS,cAAc,aACjC,aAAa,SAAS,MAAM,YAEvB,UAED,QAAQ,WACR,MAAM,QAAQ,SAAS,QAAQ,YAC/B,MAAM,SAAS,SAAS,SAAS;AAInC,UAAA,IAAI,KAAK,MAAM,MAAM,IAAI,UAAU,GACnC,IAAI,KAAK,MAAM,MAAM,IAAI,UAAU,GACnC,QAAQ,KAAK,IAAI,KAAK,MAAM,MAAM,QAAQ,UAAU,GAAG,CAAC,GACxD,SAAS,KAAK,IAAI,KAAK,MAAM,MAAM,SAAS,UAAU,GAAG,CAAC,GAE1D,eAAe,IAAIC,WAAM,mBAAmB,OAAO,QAAQ,CAAC,GAC5D,aAAa,QAAQ,aAAa,GAAG,GAAG,OAAO,MAAM;AAE3D,WAAA,aAAa,QAAQ,aAAa,YAAY,GAAG,CAAC,GAG3C,aAAa;AAAA,EACxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAUO,OAAO,QAAwC,OACtD;AACI,UAAM,WAAW,KAAK;AAEtB,QAAI,CAAC;AAEK,YAAA,IAAI,MAAM,8CAA8C;AAGlE,QAAI,SACA,YACA;AAEA,eAEI,kBAAkBD,KAAAA,gBAElB,gBAAgB,UAIhB,gBAAgB,SAAS,gBAAgB,QAAQ;AAAA,MAC7C,QAAQ;AAAA,MACR,YAAY,SAAS;AAAA,IACxB,CAAA,GAEG,UAEA,UAAU,QAAQ,MAAM,OACxB,UAAU,SAAS,MAAM,QACzB,QAAQ,cAKhB,iBAEA,UAAW,cAAc,YAAkC,oBAAoB,SAC/E,aAAc,cAAc,YAAkC,oBAAoB,YAClF,QAAQ,SAAS,cAAc,UAI/B,UAAU,SAAS,cAAc,aACjC,aAAa,SAAS,YAEjB,UAED,QAAQ,WACR,MAAM,QAAQ,SAAS,QAAQ,YAC/B,MAAM,SAAS,SAAS,SAAS;AAIzC,UAAM,IAAI,KAAK,MAAM,MAAM,IAAI,UAAU,GACnC,IAAI,KAAK,MAAM,MAAM,IAAI,UAAU,GACnC,QAAQ,KAAK,IAAI,KAAK,MAAM,MAAM,QAAQ,UAAU,GAAG,CAAC,GACxD,SAAS,KAAK,IAAI,KAAK,MAAM,MAAM,SAAS,UAAU,GAAG,CAAC;AAEhE,WAAO,QAAQ,aAAa,GAAG,GAAG,OAAO,MAAM,EAAE;AAAA,EACrD;AAAA;AAAA,EAGO,UACP;AACI,SAAK,WAAW;AAAA,EACpB;AACJ;AAvPa,cAGF,YAA+B;AAAA,EAClC,MAAM;AAAA,EACN,MAAME,KAAc,cAAA;AACxB;AAmPJC,KAAAA,WAAW,IAAI,aAAa;;"}