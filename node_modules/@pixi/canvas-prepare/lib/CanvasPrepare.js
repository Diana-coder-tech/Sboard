"use strict";
var core = require("@pixi/core"), prepare = require("@pixi/prepare");
const CANVAS_START_SIZE = 16;
function uploadBaseTextures(prepare2, item) {
  const tempPrepare = prepare2;
  if (item instanceof core.BaseTexture) {
    const image = item.source, imageWidth = image.width === 0 ? tempPrepare.canvas.width : Math.min(tempPrepare.canvas.width, image.width), imageHeight = image.height === 0 ? tempPrepare.canvas.height : Math.min(tempPrepare.canvas.height, image.height);
    return tempPrepare.ctx.drawImage(
      image,
      0,
      0,
      imageWidth,
      imageHeight,
      0,
      0,
      tempPrepare.canvas.width,
      tempPrepare.canvas.height
    ), !0;
  }
  return !1;
}
class CanvasPrepare extends prepare.BasePrepare {
  /**
   * @param renderer - A reference to the current renderer
   */
  constructor(renderer) {
    super(renderer), this.uploadHookHelper = this, this.canvas = core.settings.ADAPTER.createCanvas(
      CANVAS_START_SIZE,
      CANVAS_START_SIZE
    ), this.ctx = this.canvas.getContext("2d"), this.registerUploadHook(uploadBaseTextures);
  }
  /** Destroys the plugin, don't use after this */
  destroy() {
    super.destroy(), this.ctx = null, this.canvas = null;
  }
}
CanvasPrepare.extension = {
  name: "prepare",
  type: core.ExtensionType.CanvasRendererSystem
};
core.extensions.add(CanvasPrepare);
exports.CanvasPrepare = CanvasPrepare;
//# sourceMappingURL=CanvasPrepare.js.map
