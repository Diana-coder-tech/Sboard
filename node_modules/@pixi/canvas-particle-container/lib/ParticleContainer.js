"use strict";
var particleContainer = require("@pixi/particle-container");
particleContainer.ParticleContainer.prototype.renderCanvas = function(renderer) {
  if (!this.visible || this.worldAlpha <= 0 || !this.children.length || !this.renderable)
    return;
  const context = renderer.canvasContext.activeContext, transform = this.worldTransform;
  let isRotated = !0, positionX = 0, positionY = 0, finalWidth = 0, finalHeight = 0;
  renderer.canvasContext.setBlendMode(this.blendMode), context.globalAlpha = this.worldAlpha, this.displayObjectUpdateTransform();
  for (let i = 0; i < this.children.length; ++i) {
    const child = this.children[i];
    if (!child.visible || !child._texture.valid)
      continue;
    const frame = child._texture.frame;
    if (context.globalAlpha = this.worldAlpha * child.alpha, child.rotation % (Math.PI * 2) === 0)
      isRotated && (renderer.canvasContext.setContextTransform(transform, !1, 1), isRotated = !1), positionX = child.anchor.x * (-frame.width * child.scale.x) + child.position.x + 0.5, positionY = child.anchor.y * (-frame.height * child.scale.y) + child.position.y + 0.5, finalWidth = frame.width * child.scale.x, finalHeight = frame.height * child.scale.y;
    else {
      isRotated || (isRotated = !0), child.displayObjectUpdateTransform();
      const childTransform = child.worldTransform;
      renderer.canvasContext.setContextTransform(childTransform, this.roundPixels, 1), positionX = child.anchor.x * -frame.width + 0.5, positionY = child.anchor.y * -frame.height + 0.5, finalWidth = frame.width, finalHeight = frame.height;
    }
    const resolution = child._texture.baseTexture.resolution, contextResolution = renderer.canvasContext.activeResolution;
    context.drawImage(
      child._texture.baseTexture.getDrawableSource(),
      frame.x * resolution,
      frame.y * resolution,
      frame.width * resolution,
      frame.height * resolution,
      positionX * contextResolution,
      positionY * contextResolution,
      finalWidth * contextResolution,
      finalHeight * contextResolution
    );
  }
};
//# sourceMappingURL=ParticleContainer.js.map
