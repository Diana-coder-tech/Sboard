{"version":3,"file":"Container.mjs","sources":["../src/Container.ts"],"sourcesContent":["import { Container } from '@pixi/display';\n\nimport type { CanvasRenderer } from '@pixi/canvas-renderer';\nimport type { MaskData } from '@pixi/core';\n\n/**\n * To be overridden by the subclass\n * @method _renderCanvas\n * @memberof PIXI.Container#\n * @protected\n * @param {PIXI.CanvasRenderer} _renderer - The renderer\n */\nContainer.prototype._renderCanvas = function _renderCanvas(_renderer: CanvasRenderer): void\n{\n    // this is where content itself gets rendered...\n};\n\n/**\n * Renders the object using the Canvas renderer\n * @method renderCanvas\n * @memberof PIXI.Container#\n * @param {PIXI.CanvasRenderer} renderer - The renderer\n */\nContainer.prototype.renderCanvas = function renderCanvas(renderer: CanvasRenderer): void\n{\n    // if not visible or the alpha is 0 then no need to render this\n    if (!this.visible || this.worldAlpha <= 0 || !this.renderable)\n    {\n        return;\n    }\n\n    if (this._mask)\n    {\n        renderer.mask.pushMask(this._mask as MaskData);\n    }\n\n    this._renderCanvas(renderer);\n    for (let i = 0, j = this.children.length; i < j; ++i)\n    {\n        this.children[i].renderCanvas(renderer);\n    }\n\n    if (this._mask)\n    {\n        renderer.mask.popMask(renderer);\n    }\n};\n"],"names":[],"mappings":";AAYA,UAAU,UAAU,gBAAgB,SAAuB,WAC3D;AAEA;AAQA,UAAU,UAAU,eAAe,SAAsB,UACzD;AAEQ,MAAA,EAAA,CAAC,KAAK,WAAW,KAAK,cAAc,KAAK,CAAC,KAAK,aAKnD;AAAI,SAAK,SAEL,SAAS,KAAK,SAAS,KAAK,KAAiB,GAGjD,KAAK,cAAc,QAAQ;AAClB,aAAA,IAAI,GAAG,IAAI,KAAK,SAAS,QAAQ,IAAI,GAAG,EAAE;AAE/C,WAAK,SAAS,CAAC,EAAE,aAAa,QAAQ;AAGtC,SAAK,SAEL,SAAS,KAAK,QAAQ,QAAQ;AAAA,EAAA;AAEtC;"}